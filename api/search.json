[{"id":"dc468c4d57a7b312fa128edbafcecf5f","title":"Operation System","content":"1. 操作系统概述1.1 操作系统的定义、功能及目标1.1.1 操作系统的定义操作系统(Operating System，OS)是指控制和管理整个计算机系统的硬件和软件资源，并合理地组织调度计算机的工作和资源的分配;以提供给用户和其他软件方便的接口和环境;它是计算机系统中最基本的系统软件\n例如：打开windows操作系统的任务管理器\n1.1.2 操作系统的功能和目标\n操作系统是系统资源的管理者\n操作系统能向上层提供方便易用的服务\n操作系统是最接近硬件的层次\n\n\n\n1.2 操作系统的特征四大特征：\n\n并发\n共享\n虚拟\n异步\n\n1.2.1 并发并发指两个或多个事件在同一时间间隔内发生。这些事件宏观上是同时发生的，但微观上是交替发生的。\n易混概念——并行:指两个或多个事件在同一时刻同时发生。\n操作系统的并发性指计算机系统中“同时”运行着多个程序，这些程序宏观上看是同时运行着的，而微观上看是交替运行的。操作系统就是伴随着“多道程序技术”而出现的。因此，操作系统和程序并发是一起诞生的。\n1.2.2 共享共享即资源共享，是指系统中的资源可供内存中多个并发执行的进程共同使用。\n两种共享方式：\n\n互斥共享——系统中的某些资源，虽然可以提供给多个进程使用，但一个时间段内只允许一个进程访问该资源\n同时共享——系统中的某些资源，允许一个时间段内由多个进程“同时”对它们进行访问\n\n并发与共享互为存在条件，缺一不可。\n1.2.3 虚拟虚拟是指把一个物理上的实体变为若干个逻辑上的对应物。物理实体(前者)是实际存在的，而逻辑上对应物(后者)是用户感受到的。\n对于虚拟处理器技术，利用了虚拟技术中的“时分复用技术”：微观上处理机在各个微小的时间段内交替着为各个进程服务\n1.2.4 异步异步是指，在多道程序环境下，允许多个程序并发执行，但由于资源有限，进程的执行不是一贯到底的，而是走走停停，以不可预知的速度向前推进，这就是进程的异步性。\n与并发的关系：\n\n\n\n\n\n\n\n\n\n由于并发运行的程序会争抢着使用系统资源，而系统中的资源有限，因此进程的执行不是一贯到底的，而是走走停停的，以不可预知的速度向前推进。如果失去了并发性，即系统只能串行地运行各个程序，那么每个程序的执行会一贯到底。只有系统拥有并发性，才有可能导致异步性。\n\n\n1.3 操作系统的分类1.3.1 手工操作阶段缺点：用户独占全机、人机速度矛盾导致资源利用率极低\n1.3.2 批处理阶段——单道批处理系统\n引入脱机输入/输出技术，并由监督程序负责控制作业的输入、输出\n\n优点：缓解了一定程度的人机速度矛盾，资源利用率有所提升\n缺点：内存中仅能有一道程序运行，只有该程序运行结束之后才能调入下一道程序。CPU有大量的时间是在空闲等待I/O完成。资源利用率依然很低\n1.3.3 多道批处理系统\n可每次往内存中读入多道程序。\n操作系统正式诞生，用于支持多道程序并发运行。\n\n优点：多道程序并发执行，共享计算机资源。资源利用率大幅提升，CPU和其他资源更能保持“忙碌”状态，系统吞吐量增大。\n缺点：用户响应时间长，没有人机交互功能(用户提交自己的作业之后就只能等待计算机处理完成，中间不能控制自己的作业执行。eg:无法调试程序/无法在程序运行过程中输入一些参数)\n1.3.4 分时操作系统定义：计算机以时间片为单位轮流为各个用户/作业服务，各个用户可通过终端与计算机进行交互。主要优点:用户请求可以被即时响应，解决了人机交互问题。允许多个用户同时使用一台计算机，并且用户对计算机的操作相互独立，感受不到别人的存在。\n缺点：不能优先处理一些紧急任务。操作系统对各个用户/作业都是完全公平的，循环地为每个用户/作业服务一个时间片，不区分任务的紧急性。\n1.3.5 实时操作系统\n硬实时系统：必须在绝对严格的时间内完成处理\n软实时系统：能接受偶尔违反时间规定\n\n优点：能够优先响应一些紧急任务，某些紧急任务不需时间片排队。\n1.3.6 其他操作系统\n网络操作系统：是伴随着计算机网络的发展而诞生的，能把网络中各个计算机有机地结合起来，实现数据传送等功能，实现网络中各种资源的共享(如文件共享)和各台计算机之间的通信\n分布式操作系统：主要特点是分布性和并行性。系统中的各台计算机地位相同，任何工作都可以分布在这些计算机上，由它们并行、协同完成这个任务\n个人计算机操作系统：如Windows、MacOs等\n\n\n\n1.4 操作系统的运行机制\n指令：是处理器能识别、执行的最基本命令\n\n1.4.1 内核程序 &amp; 应用程序\n内核程序：微软、苹果有一帮人负责实现操作系统，他们写的是“内核程序”由很多内核程序组成了“操作系统内核”，或简称“内核(Kernel)”。内核是操作系统最重要最核心的部分，也是最接近硬件的部分\n\n1.4.2 内核结构内核结构示意图:\n\n对应结构简述:\n\n1.4.3 特权指令 &amp; 非特权指令CPU设计时就划分了特权指令和非特权指令，因此CPU执行每条指令前就能判断出其类型\n\n应用程序只能使用非特权指令，如：加减法指令等。\n操作系统内核作为“管理者”，有时会让CPU执行一些特权指令，如:内存清零指令。这些指令影响重大，只允许“管理者”——即操作系统内核来使用\n\n1.4.4 内核态 &amp; 用户态CPU有两种状态：内核态(kernal mode)和用户态(user mode)\n\n处于内核态时，说明此时正在运行的是内核程序，此时可以执行特权指令\n处于用户态时，说明此时正在运行的是应用程序，此时只能执行非特权指令\n\n1.4.5 状态切换\n内核态-&gt;用户态：执行一条特权指令——修改PSW的标志位为用户态，这个动作意味着操作系统将主动让出CPU使用权\n用户态-&gt;内核态：由中断引发，硬件自动完成变态过程，触发中断信号意味着操作系统将强行夺回CPU的使用权\n\n注：但凡需要操作系统介入的地方，都会触发中断信号\n\n\n\n\n\n\n\n\n\nCPU检测到中断信号后，会立即变为核心态，并停止运行当前的应用程序，转而运行处理终中断信号的内核程序\n\n\n1.5","slug":"Operation-System","date":"2022-01-30T10:55:06.000Z","categories_index":"","tags_index":"","author_index":"Troye Huang"},{"id":"26db5d13c5993d31674f53301da99963","title":"ELK System Deployment","content":"1. PrefaceIn the last blog (ELK and Visualization System), we learned that the ELK system is composed of multiple open source applications. Each application needs to run separately, and finally communicate with each other through the corresponding ip address and port (Such as 172.xxx:3000). So if we need to deploy the entire ELK to a cloud server, it is best to deploy each application in a separate cloud server. This not only improves system stability, but also makes it easier to locate errors when problems occur.This deployment method makes it easier for operation and maintenance personnel to maintain and update the system.\n\n\n2. System Topology Diagram“image”\n\n\n3. Environment configurationAll the files need to be download in /usr/local/elk for each cloud server.\n3.1 Elasticsearch3.1.1 Install ElasticsearchInstall the Elasticsearch into /usr/local/elk\n\n\n\n\n\n\n\n\n\nwget https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-7.7.1-linux-x86_64.tar.gz\n","slug":"ELK-System-Deploy","date":"2021-12-10T15:06:22.000Z","categories_index":"","tags_index":"tech","author_index":"Troye Huang"},{"id":"cd7e78c951e94feb41fc64273d82f245","title":"ELK and Visualization System","content":"IntroELK is the abbreviation of Elasticsearch, Logstash, and Kibana. These three are the core suites, but the ELK system is often used in collaboration with other open source software (such as Filebeat, Grafana).\n\n\nElasticsearchElasticsearch is a real-time full-text search and analysis engine that provides three functions of collecting, analyzing, and storing data; it is a set of open REST and JAVA API structures that provide efficient search functions and a scalable distributed system. It is built on top of the Apache Lucene search engine library.\nReferenceGuide\n\n\nLogstashLogstash is a tool for collecting, analyzing, and filtering logs. It supports almost any type of logs, including system logs, error logs, and custom application logs. It can receive logs from many sources, including syslog, messaging (such as RabbitMQ), and JMX, and it can output data in a variety of ways, including email, websockets, and Elasticsearch.\nReferenceGuide\n\n\nFilebeatFilebeat is a lightweight shipper for forwarding and centralizing log data. Installed as an agent on your servers, Filebeat monitors the log files or locations that you specify, collects log events, and forwards them either to Elasticsearch or Logstash for indexing.\nReferenceGuide\n\n\nKibanaKibana is a web-based graphical interface for searching, analyzing, and visualizing log data stored in Elasticsearch metrics. It utilizes Elasticsearch’s REST interface to retrieve data, not only allows users to create their own customized dashboard views of data, but also allows them to query and filter data in special ways\nReferenceGuide\n\n\nGrafanaReferenceGuide\n","slug":"ELK-system","date":"2021-12-08T13:39:31.000Z","categories_index":"","tags_index":"tech","author_index":"Troye Huang"},{"id":"bc567916c4dc0d8169bd26d18e348d36","title":"test","content":"nice\n","slug":"test","date":"2021-12-04T16:41:32.000Z","categories_index":"","tags_index":"","author_index":"Troye Huang"},{"id":"c2d67d01ade90af49782566c8eff02c3","title":"Child Photo","content":"This is my photo when i was a child!!!\n\n","slug":"photo","date":"2021-12-04T15:53:23.000Z","categories_index":"","tags_index":"life","author_index":"Troye Huang"},{"id":"b9663f58f18133b35bfe243f3e916a80","title":"Hello World","content":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.\nQuick StartCreate a new post$ hexo new &quot;My New Post&quot;\n\nMore info: Writing\nRun server$ hexo server\n\nMore info: Server\nGenerate static files$ hexo generate\n\nMore info: Generating\nDeploy to remote sites$ hexo deploy\n\nMore info: Deployment\n","slug":"hello-world","date":"2021-12-03T12:35:04.445Z","categories_index":"","tags_index":"","author_index":"Troye Huang"}]